# -*- coding: utf-8 -*-
"""pyomoRastrigin.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FkAVu8WXOx6iJYL4inM2HQEryRc6in7y
"""

!pip install -q pyomo

!wget -N -q "https://github.com/thomasfork/ipopt_linux/raw/main/ipopt-linux64.zip"
!unzip -o -q ipopt-linux64

import numpy as np
from pyomo.environ import *

def rastrigin(model):
    delta = 0.
    for i in model.x:
      delta = delta + model.x[i]**2 - model.A[1] * cos(2 * np.pi * model.x[i])
    return model.A[1] * model.N_unknowns[1] + delta

# --- Create a model
model         = ConcreteModel()

N_unknowns          = 10
model.N_unknowns    = Param(RangeSet(1, 1), initialize = N_unknowns, within = Integers)
model.i             = RangeSet(1, N_unknowns)
model.x             = Var(model.i, within = Reals)
A                   = 10.0
model.A             = Param(RangeSet(1, 1), initialize = A, within = Reals)
for i in model.i:
  model.x[i].value = .3
  model.x[i].lower = -5.12
  model.x[i].upper =  5.12

# --- Declare objective function
model.objfun    = Objective(rule = rastrigin, sense = minimize)

model.pprint()

SolverFactory('ipopt', executable='/content/ipopt').solve(model).write()
#SolverFactory('multistart').solve(model, strategy = 'rand_guess_and_bound', solver = 'ipopt', iterations = 50).write()

# display solution
print('\nObjective function = ', model.objfun)

print('\nDecision Variables')
for i in model.x:
  print(model.x[i]())

print(model.A[1])
print(model.N_unknowns[1])
