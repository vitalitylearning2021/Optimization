# -*- coding: utf-8 -*-
"""pyomoStyblinskiTang.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kP-ZreHAvw7WzF5IVD8yYKHeiuQledRW
"""

!pip install -q pyomo

!wget -N -q "https://github.com/thomasfork/ipopt_linux/raw/main/ipopt-linux64.zip"
!unzip -o -q ipopt-linux64

import numpy as np
from pyomo.environ import *

def styblinski_tang(model):
  delta = 0.
  for i in model.x:
    delta = delta + model.params[1] * (model.params[2] * model.x[i] * model.x[i] * model.x[i] * model.x[i] + model.params[3] * model.x[i]**2 + model.params[4] * model.x[i])
  return delta

# --- Create a model
model               = ConcreteModel()

N_unknowns          = 10
model.N_unknowns    = Param(RangeSet(1, 1), initialize = N_unknowns, within = Integers)
model.i             = RangeSet(1, N_unknowns)
model.x             = Var(model.i, within = Reals)
v                   = {}
v[1]                = 0.5
v[2]                = 1.
v[3]                = -16.
v[4]                = 5.
model.params        = Param(RangeSet(1, 4), initialize = v, within = Reals)
for i in model.i:
  model.x[i].value = -.3
  model.x[i].lower = -5.
  model.x[i].upper = 5.

# --- Declare objective function
model.objfun    = Objective(rule = styblinski_tang, sense = minimize)

model.pprint()

SolverFactory('ipopt', executable='/content/ipopt').solve(model).write()
#SolverFactory('multistart').solve(model, strategy = 'rand_guess_and_bound', solver = 'ipopt', iterations = 50).write()

# display solution
print('\nObjective function = ', model.objfun)

print('\nDecision Variables')
for i in model.x:
  print(model.x[i]())

print(model.N_unknowns[1])
